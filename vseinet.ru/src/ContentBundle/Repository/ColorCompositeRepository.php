<?php

namespace ContentBundle\Repository;

use ContentBundle\Entity\ColorComposite;

/**
 * ColorCompositeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ColorCompositeRepository extends \Doctrine\ORM\EntityRepository
{
    protected $schemas = [
        [
            'type' => 'single',
            'name' => '',
            'usedAsMain' => false,
            'usedAsAddon' => true,
            'usedWithAddons' => true,
        ],
        [
            'type' => 'transparent',
            'name' => 'прозрачный',
            'female' => 'прозрачная',
            'neuter' => 'прозрачное',
            'plural' => 'прозрачные',
            'usedAsMain' => true,
            'usedAsAddon' => false,
            'usedWithAddons' => true,
        ],
        [
            'type' => 'rainbow',
            'name' => 'многоцветный',
            'female' => 'многоцветная',
            'neuter' => 'многоцветное',
            'plural' => 'многоцветные',
            'usedAsMain' => true,
            'usedAsAddon' => false,
            'usedWithAddons' => false,
        ],
        [
            'type' => 'steel',
            'name' => 'нержавеющая сталь',
            'usedAsMain' => true,
            'usedAsAddon' => false,
            'usedWithAddons' => true,
        ],
        [
            'type' => 'in-assortment',
            'name' => 'цвета в ассортименте',
            'usedAsMain' => true,
            'usedAsAddon' => false,
            'usedWithAddons' => false,
        ],
        [
            'type' => 'metal',
            'name' => 'металлик',
            'usedAsMain' => true,
            'usedAsAddon' => true,
            'usedWithAddons' => true,
        ],
        [
            'type' => 'matte',
            'name' => 'матовый',
            'female' => 'матовая',
            'neuter' => 'матовое',
            'plural' => 'матовые',
            'usedAsMain' => true,
            'usedAsAddon' => true,
            'usedWithAddons' => true,
        ],
        [
            'type' => 'pearl',
            'name' => 'перламутровый',
            'female' => 'перламутровая',
            'neuter' => 'перламутровое',
            'plural' => 'перламутровые',
            'usedAsMain' => true,
            'usedAsAddon' => true,
            'usedWithAddons' => true,
        ],
    ];

    public function getSchemas()
    {
        return $this->schemas;
    }

    public function getSchema($type, $gender)
    {
        foreach ($this->schemas as $schema) {
            if ($schema['type'] == $type) {
                if (isset($schema[$gender])) {
                    $schema['name'] = $schema[$gender];
                }

                return $schema;
            }
        }

        throw new \LogicException(sprintf('Цветовая схема "%s" не определена', $type));
    }
}
